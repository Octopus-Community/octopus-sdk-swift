//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: com/octopuscommunity/MagicLinkServiceProto.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// MagicLinkService provides functionality for authentication using magic links.
///
/// Usage: instantiate `Com_Octopuscommunity_MagicLinkServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Octopuscommunity_MagicLinkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? { get }

  func generateLink(
    _ request: Com_Octopuscommunity_GenerateLinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_GenerateLinkRequest, Com_Octopuscommunity_GenerateLinkResponse>

  func confirmLink(
    _ request: Com_Octopuscommunity_ConfirmLinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_ConfirmLinkRequest, Com_Octopuscommunity_ConfirmLinkResponse>

  func getJWT(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>
}

extension Com_Octopuscommunity_MagicLinkServiceClientProtocol {
  public var serviceName: String {
    return "com.octopuscommunity.MagicLinkService"
  }

  /// Generates a magic link and sends it to the specified email.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateLink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateLink(
    _ request: Com_Octopuscommunity_GenerateLinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_GenerateLinkRequest, Com_Octopuscommunity_GenerateLinkResponse> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.generateLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateLinkInterceptors() ?? []
    )
  }

  /// Confirms a magic link when a user clicks on it.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmLink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func confirmLink(
    _ request: Com_Octopuscommunity_ConfirmLinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_ConfirmLinkRequest, Com_Octopuscommunity_ConfirmLinkResponse> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.confirmLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLinkInterceptors() ?? []
    )
  }

  /// Retrieves a JWT for a confirmed magic link.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetJWT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getJWT(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.getJWT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetJWTInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Com_Octopuscommunity_MagicLinkServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Octopuscommunity_MagicLinkServiceNIOClient")
public final class Com_Octopuscommunity_MagicLinkServiceClient: Com_Octopuscommunity_MagicLinkServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.octopuscommunity.MagicLinkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Com_Octopuscommunity_MagicLinkServiceNIOClient: Com_Octopuscommunity_MagicLinkServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.octopuscommunity.MagicLinkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// MagicLinkService provides functionality for authentication using magic links.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_MagicLinkServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? { get }

  func makeGenerateLinkCall(
    _ request: Com_Octopuscommunity_GenerateLinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_GenerateLinkRequest, Com_Octopuscommunity_GenerateLinkResponse>

  func makeConfirmLinkCall(
    _ request: Com_Octopuscommunity_ConfirmLinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_ConfirmLinkRequest, Com_Octopuscommunity_ConfirmLinkResponse>

  func makeGetJwtCall(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_MagicLinkServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_MagicLinkServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGenerateLinkCall(
    _ request: Com_Octopuscommunity_GenerateLinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_GenerateLinkRequest, Com_Octopuscommunity_GenerateLinkResponse> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.generateLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateLinkInterceptors() ?? []
    )
  }

  public func makeConfirmLinkCall(
    _ request: Com_Octopuscommunity_ConfirmLinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_ConfirmLinkRequest, Com_Octopuscommunity_ConfirmLinkResponse> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.confirmLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLinkInterceptors() ?? []
    )
  }

  public func makeGetJwtCall(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.getJWT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetJWTInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_MagicLinkServiceAsyncClientProtocol {
  public func generateLink(
    _ request: Com_Octopuscommunity_GenerateLinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_GenerateLinkResponse {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.generateLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateLinkInterceptors() ?? []
    )
  }

  public func confirmLink(
    _ request: Com_Octopuscommunity_ConfirmLinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_ConfirmLinkResponse {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.confirmLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLinkInterceptors() ?? []
    )
  }

  public func getJWT(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_IsAuthenticatedResponse {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.getJWT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetJWTInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Octopuscommunity_MagicLinkServiceAsyncClient: Com_Octopuscommunity_MagicLinkServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Com_Octopuscommunity_MagicLinkServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'generateLink'.
  func makeGenerateLinkInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_GenerateLinkRequest, Com_Octopuscommunity_GenerateLinkResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmLink'.
  func makeConfirmLinkInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_ConfirmLinkRequest, Com_Octopuscommunity_ConfirmLinkResponse>]

  /// - Returns: Interceptors to use when invoking 'getJWT'.
  func makeGetJWTInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>]
}

public enum Com_Octopuscommunity_MagicLinkServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MagicLinkService",
    fullName: "com.octopuscommunity.MagicLinkService",
    methods: [
      Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.generateLink,
      Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.confirmLink,
      Com_Octopuscommunity_MagicLinkServiceClientMetadata.Methods.getJWT,
    ]
  )

  public enum Methods {
    public static let generateLink = GRPCMethodDescriptor(
      name: "GenerateLink",
      path: "/com.octopuscommunity.MagicLinkService/GenerateLink",
      type: GRPCCallType.unary
    )

    public static let confirmLink = GRPCMethodDescriptor(
      name: "ConfirmLink",
      path: "/com.octopuscommunity.MagicLinkService/ConfirmLink",
      type: GRPCCallType.unary
    )

    public static let getJWT = GRPCMethodDescriptor(
      name: "GetJWT",
      path: "/com.octopuscommunity.MagicLinkService/GetJWT",
      type: GRPCCallType.unary
    )
  }
}

/// MagicLinkStreamService provides subscription to channel in order to know when a user is authenticated via magic link
///
/// Usage: instantiate `Com_Octopuscommunity_MagicLinkStreamServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Octopuscommunity_MagicLinkStreamServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? { get }

  func subscribe(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Com_Octopuscommunity_IsAuthenticatedResponse) -> Void
  ) -> ServerStreamingCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>
}

extension Com_Octopuscommunity_MagicLinkStreamServiceClientProtocol {
  public var serviceName: String {
    return "com.octopuscommunity.MagicLinkStreamService"
  }

  /// Subscribes to authentication status updates for a given magicLinkId and email.
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribe(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Com_Octopuscommunity_IsAuthenticatedResponse) -> Void
  ) -> ServerStreamingCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse> {
    return self.makeServerStreamingCall(
      path: Com_Octopuscommunity_MagicLinkStreamServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Com_Octopuscommunity_MagicLinkStreamServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Octopuscommunity_MagicLinkStreamServiceNIOClient")
public final class Com_Octopuscommunity_MagicLinkStreamServiceClient: Com_Octopuscommunity_MagicLinkStreamServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.octopuscommunity.MagicLinkStreamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Com_Octopuscommunity_MagicLinkStreamServiceNIOClient: Com_Octopuscommunity_MagicLinkStreamServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.octopuscommunity.MagicLinkStreamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// MagicLinkStreamService provides subscription to channel in order to know when a user is authenticated via magic link
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_MagicLinkStreamServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? { get }

  func makeSubscribeCall(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_MagicLinkStreamServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_MagicLinkStreamServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSubscribeCall(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Com_Octopuscommunity_MagicLinkStreamServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_MagicLinkStreamServiceAsyncClientProtocol {
  public func subscribe(
    _ request: Com_Octopuscommunity_IsAuthenticatedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Com_Octopuscommunity_IsAuthenticatedResponse> {
    return self.performAsyncServerStreamingCall(
      path: Com_Octopuscommunity_MagicLinkStreamServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Octopuscommunity_MagicLinkStreamServiceAsyncClient: Com_Octopuscommunity_MagicLinkStreamServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Com_Octopuscommunity_MagicLinkStreamServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>]
}

public enum Com_Octopuscommunity_MagicLinkStreamServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MagicLinkStreamService",
    fullName: "com.octopuscommunity.MagicLinkStreamService",
    methods: [
      Com_Octopuscommunity_MagicLinkStreamServiceClientMetadata.Methods.subscribe,
    ]
  )

  public enum Methods {
    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/com.octopuscommunity.MagicLinkStreamService/Subscribe",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// MagicLinkService provides functionality for authentication using magic links.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Com_Octopuscommunity_MagicLinkServiceProvider: CallHandlerProvider {
  var interceptors: Com_Octopuscommunity_MagicLinkServiceServerInterceptorFactoryProtocol? { get }

  /// Generates a magic link and sends it to the specified email.
  func generateLink(request: Com_Octopuscommunity_GenerateLinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_GenerateLinkResponse>

  /// Confirms a magic link when a user clicks on it.
  func confirmLink(request: Com_Octopuscommunity_ConfirmLinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_ConfirmLinkResponse>

  /// Retrieves a JWT for a confirmed magic link.
  func getJWT(request: Com_Octopuscommunity_IsAuthenticatedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_IsAuthenticatedResponse>
}

extension Com_Octopuscommunity_MagicLinkServiceProvider {
  public var serviceName: Substring {
    return Com_Octopuscommunity_MagicLinkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GenerateLink":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_GenerateLinkRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_GenerateLinkResponse>(),
        interceptors: self.interceptors?.makeGenerateLinkInterceptors() ?? [],
        userFunction: self.generateLink(request:context:)
      )

    case "ConfirmLink":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_ConfirmLinkRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_ConfirmLinkResponse>(),
        interceptors: self.interceptors?.makeConfirmLinkInterceptors() ?? [],
        userFunction: self.confirmLink(request:context:)
      )

    case "GetJWT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_IsAuthenticatedRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_IsAuthenticatedResponse>(),
        interceptors: self.interceptors?.makeGetJWTInterceptors() ?? [],
        userFunction: self.getJWT(request:context:)
      )

    default:
      return nil
    }
  }
}

/// MagicLinkService provides functionality for authentication using magic links.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_MagicLinkServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_MagicLinkServiceServerInterceptorFactoryProtocol? { get }

  /// Generates a magic link and sends it to the specified email.
  func generateLink(
    request: Com_Octopuscommunity_GenerateLinkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_GenerateLinkResponse

  /// Confirms a magic link when a user clicks on it.
  func confirmLink(
    request: Com_Octopuscommunity_ConfirmLinkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_ConfirmLinkResponse

  /// Retrieves a JWT for a confirmed magic link.
  func getJWT(
    request: Com_Octopuscommunity_IsAuthenticatedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_IsAuthenticatedResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_MagicLinkServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_MagicLinkServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Com_Octopuscommunity_MagicLinkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Com_Octopuscommunity_MagicLinkServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GenerateLink":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_GenerateLinkRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_GenerateLinkResponse>(),
        interceptors: self.interceptors?.makeGenerateLinkInterceptors() ?? [],
        wrapping: { try await self.generateLink(request: $0, context: $1) }
      )

    case "ConfirmLink":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_ConfirmLinkRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_ConfirmLinkResponse>(),
        interceptors: self.interceptors?.makeConfirmLinkInterceptors() ?? [],
        wrapping: { try await self.confirmLink(request: $0, context: $1) }
      )

    case "GetJWT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_IsAuthenticatedRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_IsAuthenticatedResponse>(),
        interceptors: self.interceptors?.makeGetJWTInterceptors() ?? [],
        wrapping: { try await self.getJWT(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Com_Octopuscommunity_MagicLinkServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'generateLink'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateLinkInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_GenerateLinkRequest, Com_Octopuscommunity_GenerateLinkResponse>]

  /// - Returns: Interceptors to use when handling 'confirmLink'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmLinkInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_ConfirmLinkRequest, Com_Octopuscommunity_ConfirmLinkResponse>]

  /// - Returns: Interceptors to use when handling 'getJWT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetJWTInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>]
}

public enum Com_Octopuscommunity_MagicLinkServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MagicLinkService",
    fullName: "com.octopuscommunity.MagicLinkService",
    methods: [
      Com_Octopuscommunity_MagicLinkServiceServerMetadata.Methods.generateLink,
      Com_Octopuscommunity_MagicLinkServiceServerMetadata.Methods.confirmLink,
      Com_Octopuscommunity_MagicLinkServiceServerMetadata.Methods.getJWT,
    ]
  )

  public enum Methods {
    public static let generateLink = GRPCMethodDescriptor(
      name: "GenerateLink",
      path: "/com.octopuscommunity.MagicLinkService/GenerateLink",
      type: GRPCCallType.unary
    )

    public static let confirmLink = GRPCMethodDescriptor(
      name: "ConfirmLink",
      path: "/com.octopuscommunity.MagicLinkService/ConfirmLink",
      type: GRPCCallType.unary
    )

    public static let getJWT = GRPCMethodDescriptor(
      name: "GetJWT",
      path: "/com.octopuscommunity.MagicLinkService/GetJWT",
      type: GRPCCallType.unary
    )
  }
}
/// MagicLinkStreamService provides subscription to channel in order to know when a user is authenticated via magic link
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Com_Octopuscommunity_MagicLinkStreamServiceProvider: CallHandlerProvider {
  var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribes to authentication status updates for a given magicLinkId and email.
  func subscribe(request: Com_Octopuscommunity_IsAuthenticatedRequest, context: StreamingResponseCallContext<Com_Octopuscommunity_IsAuthenticatedResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Com_Octopuscommunity_MagicLinkStreamServiceProvider {
  public var serviceName: Substring {
    return Com_Octopuscommunity_MagicLinkStreamServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subscribe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_IsAuthenticatedRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_IsAuthenticatedResponse>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    default:
      return nil
    }
  }
}

/// MagicLinkStreamService provides subscription to channel in order to know when a user is authenticated via magic link
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_MagicLinkStreamServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribes to authentication status updates for a given magicLinkId and email.
  func subscribe(
    request: Com_Octopuscommunity_IsAuthenticatedRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Com_Octopuscommunity_IsAuthenticatedResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_MagicLinkStreamServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_MagicLinkStreamServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Com_Octopuscommunity_MagicLinkStreamServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Com_Octopuscommunity_MagicLinkStreamServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subscribe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_IsAuthenticatedRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_IsAuthenticatedResponse>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        wrapping: { try await self.subscribe(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Com_Octopuscommunity_MagicLinkStreamServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_IsAuthenticatedRequest, Com_Octopuscommunity_IsAuthenticatedResponse>]
}

public enum Com_Octopuscommunity_MagicLinkStreamServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MagicLinkStreamService",
    fullName: "com.octopuscommunity.MagicLinkStreamService",
    methods: [
      Com_Octopuscommunity_MagicLinkStreamServiceServerMetadata.Methods.subscribe,
    ]
  )

  public enum Methods {
    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/com.octopuscommunity.MagicLinkStreamService/Subscribe",
      type: GRPCCallType.serverStreaming
    )
  }
}
