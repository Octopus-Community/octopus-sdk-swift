//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: com/octopuscommunity/RealtimeServiceProto.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Com_Octopuscommunity_RealtimeServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Octopuscommunity_RealtimeServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>

  func isTyping(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>

  func subscribe(
    _ request: Com_Octopuscommunity_SubscribeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Com_Octopuscommunity_SubscribeResponse) -> Void
  ) -> ServerStreamingCall<Com_Octopuscommunity_SubscribeRequest, Com_Octopuscommunity_SubscribeResponse>
}

extension Com_Octopuscommunity_RealtimeServiceClientProtocol {
  public var serviceName: String {
    return "com.octopuscommunity.RealtimeService"
  }

  ///Not for V0.1
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// Unary call to IsTyping
  ///
  /// - Parameters:
  ///   - request: Request to send to IsTyping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func isTyping(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.isTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsTypingInterceptors() ?? []
    )
  }

  /// Server streaming call to Subscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribe(
    _ request: Com_Octopuscommunity_SubscribeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Com_Octopuscommunity_SubscribeResponse) -> Void
  ) -> ServerStreamingCall<Com_Octopuscommunity_SubscribeRequest, Com_Octopuscommunity_SubscribeResponse> {
    return self.makeServerStreamingCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Com_Octopuscommunity_RealtimeServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Octopuscommunity_RealtimeServiceNIOClient")
public final class Com_Octopuscommunity_RealtimeServiceClient: Com_Octopuscommunity_RealtimeServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.octopuscommunity.RealtimeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Com_Octopuscommunity_RealtimeServiceNIOClient: Com_Octopuscommunity_RealtimeServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.octopuscommunity.RealtimeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_RealtimeServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>

  func makeIsTypingCall(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>

  func makeSubscribeCall(
    _ request: Com_Octopuscommunity_SubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Com_Octopuscommunity_SubscribeRequest, Com_Octopuscommunity_SubscribeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_RealtimeServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_RealtimeServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func makeIsTypingCall(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.isTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsTypingInterceptors() ?? []
    )
  }

  public func makeSubscribeCall(
    _ request: Com_Octopuscommunity_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Com_Octopuscommunity_SubscribeRequest, Com_Octopuscommunity_SubscribeResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_RealtimeServiceAsyncClientProtocol {
  public func ping(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_Empty {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func isTyping(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_Empty {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.isTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsTypingInterceptors() ?? []
    )
  }

  public func subscribe(
    _ request: Com_Octopuscommunity_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Com_Octopuscommunity_SubscribeResponse> {
    return self.performAsyncServerStreamingCall(
      path: Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Octopuscommunity_RealtimeServiceAsyncClient: Com_Octopuscommunity_RealtimeServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Com_Octopuscommunity_RealtimeServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>]

  /// - Returns: Interceptors to use when invoking 'isTyping'.
  func makeIsTypingInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_SubscribeRequest, Com_Octopuscommunity_SubscribeResponse>]
}

public enum Com_Octopuscommunity_RealtimeServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RealtimeService",
    fullName: "com.octopuscommunity.RealtimeService",
    methods: [
      Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.ping,
      Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.isTyping,
      Com_Octopuscommunity_RealtimeServiceClientMetadata.Methods.subscribe,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/com.octopuscommunity.RealtimeService/Ping",
      type: GRPCCallType.unary
    )

    public static let isTyping = GRPCMethodDescriptor(
      name: "IsTyping",
      path: "/com.octopuscommunity.RealtimeService/IsTyping",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/com.octopuscommunity.RealtimeService/Subscribe",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Com_Octopuscommunity_RealtimeServiceProvider: CallHandlerProvider {
  var interceptors: Com_Octopuscommunity_RealtimeServiceServerInterceptorFactoryProtocol? { get }

  ///Not for V0.1
  func ping(request: Com_Octopuscommunity_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_Empty>

  func isTyping(request: Com_Octopuscommunity_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_Empty>

  func subscribe(request: Com_Octopuscommunity_SubscribeRequest, context: StreamingResponseCallContext<Com_Octopuscommunity_SubscribeResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Com_Octopuscommunity_RealtimeServiceProvider {
  public var serviceName: Substring {
    return Com_Octopuscommunity_RealtimeServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_Empty>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "IsTyping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_Empty>(),
        interceptors: self.interceptors?.makeIsTypingInterceptors() ?? [],
        userFunction: self.isTyping(request:context:)
      )

    case "Subscribe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_SubscribeResponse>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_RealtimeServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_RealtimeServiceServerInterceptorFactoryProtocol? { get }

  ///Not for V0.1
  func ping(
    request: Com_Octopuscommunity_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_Empty

  func isTyping(
    request: Com_Octopuscommunity_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_Empty

  func subscribe(
    request: Com_Octopuscommunity_SubscribeRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Com_Octopuscommunity_SubscribeResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_RealtimeServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_RealtimeServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Com_Octopuscommunity_RealtimeServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Com_Octopuscommunity_RealtimeServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_Empty>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "IsTyping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_Empty>(),
        interceptors: self.interceptors?.makeIsTypingInterceptors() ?? [],
        wrapping: { try await self.isTyping(request: $0, context: $1) }
      )

    case "Subscribe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_SubscribeResponse>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        wrapping: { try await self.subscribe(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Com_Octopuscommunity_RealtimeServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>]

  /// - Returns: Interceptors to use when handling 'isTyping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsTypingInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_Empty, Com_Octopuscommunity_Empty>]

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_SubscribeRequest, Com_Octopuscommunity_SubscribeResponse>]
}

public enum Com_Octopuscommunity_RealtimeServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RealtimeService",
    fullName: "com.octopuscommunity.RealtimeService",
    methods: [
      Com_Octopuscommunity_RealtimeServiceServerMetadata.Methods.ping,
      Com_Octopuscommunity_RealtimeServiceServerMetadata.Methods.isTyping,
      Com_Octopuscommunity_RealtimeServiceServerMetadata.Methods.subscribe,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/com.octopuscommunity.RealtimeService/Ping",
      type: GRPCCallType.unary
    )

    public static let isTyping = GRPCMethodDescriptor(
      name: "IsTyping",
      path: "/com.octopuscommunity.RealtimeService/IsTyping",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/com.octopuscommunity.RealtimeService/Subscribe",
      type: GRPCCallType.serverStreaming
    )
  }
}
