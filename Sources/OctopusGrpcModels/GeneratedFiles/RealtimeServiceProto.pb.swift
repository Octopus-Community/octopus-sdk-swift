// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com/octopuscommunity/RealtimeServiceProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///TODO use more generic name to avoid leaking the implementation details
public enum Com_Octopuscommunity_Origin: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecifiedOrigin // = 0

  ///Slow-Consistent realtime ?
  case kinesis // = 1

  ///Fast-Unconsistent realtime ?
  case redis // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedOrigin
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedOrigin
    case 1: self = .kinesis
    case 2: self = .redis
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedOrigin: return 0
    case .kinesis: return 1
    case .redis: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Com_Octopuscommunity_Origin] = [
    .unspecifiedOrigin,
    .kinesis,
    .redis,
  ]

}

public struct Com_Octopuscommunity_SubscribeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var parentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_SubscribeResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Could be a oneof
  public var welcome: Com_Octopuscommunity_SubscribeWelcome {
    get {return _welcome ?? Com_Octopuscommunity_SubscribeWelcome()}
    set {_welcome = newValue}
  }
  /// Returns true if `welcome` has been explicitly set.
  public var hasWelcome: Bool {return self._welcome != nil}
  /// Clears the value of `welcome`. Subsequent reads from it will return its default value.
  public mutating func clearWelcome() {self._welcome = nil}

  ///optional  SubscribeTyping typing = 3;
  public var newMsg: Com_Octopuscommunity_SubscribeNewMsg {
    get {return _newMsg ?? Com_Octopuscommunity_SubscribeNewMsg()}
    set {_newMsg = newValue}
  }
  /// Returns true if `newMsg` has been explicitly set.
  public var hasNewMsg: Bool {return self._newMsg != nil}
  /// Clears the value of `newMsg`. Subsequent reads from it will return its default value.
  public mutating func clearNewMsg() {self._newMsg = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _welcome: Com_Octopuscommunity_SubscribeWelcome? = nil
  fileprivate var _newMsg: Com_Octopuscommunity_SubscribeNewMsg? = nil
}

public struct Com_Octopuscommunity_SubscribeNewMsg: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var octoObject: Com_Octopuscommunity_OctoObject {
    get {return _octoObject ?? Com_Octopuscommunity_OctoObject()}
    set {_octoObject = newValue}
  }
  /// Returns true if `octoObject` has been explicitly set.
  public var hasOctoObject: Bool {return self._octoObject != nil}
  /// Clears the value of `octoObject`. Subsequent reads from it will return its default value.
  public mutating func clearOctoObject() {self._octoObject = nil}

  public var origin: Com_Octopuscommunity_Origin = .unspecifiedOrigin

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _octoObject: Com_Octopuscommunity_OctoObject? = nil
}

public struct Com_Octopuscommunity_SubscribeWelcome: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.octopuscommunity"

extension Com_Octopuscommunity_Origin: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_ORIGIN"),
    1: .same(proto: "KINESIS"),
    2: .same(proto: "REDIS"),
  ]
}

extension Com_Octopuscommunity_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parentId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_SubscribeRequest, rhs: Com_Octopuscommunity_SubscribeRequest) -> Bool {
    if lhs.parentID != rhs.parentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_SubscribeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "welcome"),
    2: .same(proto: "newMsg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._welcome) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._newMsg) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._welcome {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._newMsg {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_SubscribeResponse, rhs: Com_Octopuscommunity_SubscribeResponse) -> Bool {
    if lhs._welcome != rhs._welcome {return false}
    if lhs._newMsg != rhs._newMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_SubscribeNewMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeNewMsg"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "octoObject"),
    2: .same(proto: "origin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._octoObject) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.origin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._octoObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.origin != .unspecifiedOrigin {
      try visitor.visitSingularEnumField(value: self.origin, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_SubscribeNewMsg, rhs: Com_Octopuscommunity_SubscribeNewMsg) -> Bool {
    if lhs._octoObject != rhs._octoObject {return false}
    if lhs.origin != rhs.origin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_SubscribeWelcome: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeWelcome"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_SubscribeWelcome, rhs: Com_Octopuscommunity_SubscribeWelcome) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
