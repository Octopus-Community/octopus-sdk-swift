//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: com/octopuscommunity/BasicServiceProto.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Com_Octopuscommunity_BasicServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Octopuscommunity_BasicServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? { get }

  func hello(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_HelloResponse>
}

extension Com_Octopuscommunity_BasicServiceClientProtocol {
  public var serviceName: String {
    return "com.octopuscommunity.BasicService"
  }

  /// Unary call to Hello
  ///
  /// - Parameters:
  ///   - request: Request to send to Hello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func hello(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_HelloResponse> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_BasicServiceClientMetadata.Methods.hello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Com_Octopuscommunity_BasicServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Octopuscommunity_BasicServiceNIOClient")
public final class Com_Octopuscommunity_BasicServiceClient: Com_Octopuscommunity_BasicServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.octopuscommunity.BasicService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Com_Octopuscommunity_BasicServiceNIOClient: Com_Octopuscommunity_BasicServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.octopuscommunity.BasicService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_BasicServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? { get }

  func makeHelloCall(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_HelloResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_BasicServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_BasicServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeHelloCall(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_Empty, Com_Octopuscommunity_HelloResponse> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_BasicServiceClientMetadata.Methods.hello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_BasicServiceAsyncClientProtocol {
  public func hello(
    _ request: Com_Octopuscommunity_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_HelloResponse {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_BasicServiceClientMetadata.Methods.hello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Octopuscommunity_BasicServiceAsyncClient: Com_Octopuscommunity_BasicServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Com_Octopuscommunity_BasicServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'hello'.
  func makeHelloInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_Empty, Com_Octopuscommunity_HelloResponse>]
}

public enum Com_Octopuscommunity_BasicServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BasicService",
    fullName: "com.octopuscommunity.BasicService",
    methods: [
      Com_Octopuscommunity_BasicServiceClientMetadata.Methods.hello,
    ]
  )

  public enum Methods {
    public static let hello = GRPCMethodDescriptor(
      name: "Hello",
      path: "/com.octopuscommunity.BasicService/Hello",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Com_Octopuscommunity_BasicServiceProvider: CallHandlerProvider {
  var interceptors: Com_Octopuscommunity_BasicServiceServerInterceptorFactoryProtocol? { get }

  func hello(request: Com_Octopuscommunity_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_HelloResponse>
}

extension Com_Octopuscommunity_BasicServiceProvider {
  public var serviceName: Substring {
    return Com_Octopuscommunity_BasicServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Hello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_HelloResponse>(),
        interceptors: self.interceptors?.makeHelloInterceptors() ?? [],
        userFunction: self.hello(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_BasicServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_BasicServiceServerInterceptorFactoryProtocol? { get }

  func hello(
    request: Com_Octopuscommunity_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_HelloResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_BasicServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_BasicServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Com_Octopuscommunity_BasicServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Com_Octopuscommunity_BasicServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Hello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_Empty>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_HelloResponse>(),
        interceptors: self.interceptors?.makeHelloInterceptors() ?? [],
        wrapping: { try await self.hello(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Com_Octopuscommunity_BasicServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'hello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHelloInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_Empty, Com_Octopuscommunity_HelloResponse>]
}

public enum Com_Octopuscommunity_BasicServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BasicService",
    fullName: "com.octopuscommunity.BasicService",
    methods: [
      Com_Octopuscommunity_BasicServiceServerMetadata.Methods.hello,
    ]
  )

  public enum Methods {
    public static let hello = GRPCMethodDescriptor(
      name: "Hello",
      path: "/com.octopuscommunity.BasicService/Hello",
      type: GRPCCallType.unary
    )
  }
}
