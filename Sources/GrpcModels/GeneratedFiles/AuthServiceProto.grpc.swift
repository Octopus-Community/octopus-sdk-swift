//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: com/octopuscommunity/AuthServiceProto.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Com_Octopuscommunity_AuthServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Octopuscommunity_AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? { get }

  func logAs(
    _ request: Com_Octopuscommunity_LogAsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Octopuscommunity_LogAsRequest, Com_Octopuscommunity_LogAsResponse>
}

extension Com_Octopuscommunity_AuthServiceClientProtocol {
  public var serviceName: String {
    return "com.octopuscommunity.AuthService"
  }

  /// Unary call to LogAs
  ///
  /// - Parameters:
  ///   - request: Request to send to LogAs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logAs(
    _ request: Com_Octopuscommunity_LogAsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Octopuscommunity_LogAsRequest, Com_Octopuscommunity_LogAsResponse> {
    return self.makeUnaryCall(
      path: Com_Octopuscommunity_AuthServiceClientMetadata.Methods.logAs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogAsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Com_Octopuscommunity_AuthServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Octopuscommunity_AuthServiceNIOClient")
public final class Com_Octopuscommunity_AuthServiceClient: Com_Octopuscommunity_AuthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.octopuscommunity.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Com_Octopuscommunity_AuthServiceNIOClient: Com_Octopuscommunity_AuthServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.octopuscommunity.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_AuthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? { get }

  func makeLogAsCall(
    _ request: Com_Octopuscommunity_LogAsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_LogAsRequest, Com_Octopuscommunity_LogAsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_AuthServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_AuthServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeLogAsCall(
    _ request: Com_Octopuscommunity_LogAsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Com_Octopuscommunity_LogAsRequest, Com_Octopuscommunity_LogAsResponse> {
    return self.makeAsyncUnaryCall(
      path: Com_Octopuscommunity_AuthServiceClientMetadata.Methods.logAs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogAsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_AuthServiceAsyncClientProtocol {
  public func logAs(
    _ request: Com_Octopuscommunity_LogAsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Com_Octopuscommunity_LogAsResponse {
    return try await self.performAsyncUnaryCall(
      path: Com_Octopuscommunity_AuthServiceClientMetadata.Methods.logAs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogAsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Octopuscommunity_AuthServiceAsyncClient: Com_Octopuscommunity_AuthServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Com_Octopuscommunity_AuthServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'logAs'.
  func makeLogAsInterceptors() -> [ClientInterceptor<Com_Octopuscommunity_LogAsRequest, Com_Octopuscommunity_LogAsResponse>]
}

public enum Com_Octopuscommunity_AuthServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "com.octopuscommunity.AuthService",
    methods: [
      Com_Octopuscommunity_AuthServiceClientMetadata.Methods.logAs,
    ]
  )

  public enum Methods {
    public static let logAs = GRPCMethodDescriptor(
      name: "LogAs",
      path: "/com.octopuscommunity.AuthService/LogAs",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Com_Octopuscommunity_AuthServiceProvider: CallHandlerProvider {
  var interceptors: Com_Octopuscommunity_AuthServiceServerInterceptorFactoryProtocol? { get }

  func logAs(request: Com_Octopuscommunity_LogAsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Octopuscommunity_LogAsResponse>
}

extension Com_Octopuscommunity_AuthServiceProvider {
  public var serviceName: Substring {
    return Com_Octopuscommunity_AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LogAs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_LogAsRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_LogAsResponse>(),
        interceptors: self.interceptors?.makeLogAsInterceptors() ?? [],
        userFunction: self.logAs(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Octopuscommunity_AuthServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Octopuscommunity_AuthServiceServerInterceptorFactoryProtocol? { get }

  func logAs(
    request: Com_Octopuscommunity_LogAsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Com_Octopuscommunity_LogAsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Octopuscommunity_AuthServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Octopuscommunity_AuthServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Com_Octopuscommunity_AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Com_Octopuscommunity_AuthServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LogAs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Octopuscommunity_LogAsRequest>(),
        responseSerializer: ProtobufSerializer<Com_Octopuscommunity_LogAsResponse>(),
        interceptors: self.interceptors?.makeLogAsInterceptors() ?? [],
        wrapping: { try await self.logAs(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Com_Octopuscommunity_AuthServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'logAs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogAsInterceptors() -> [ServerInterceptor<Com_Octopuscommunity_LogAsRequest, Com_Octopuscommunity_LogAsResponse>]
}

public enum Com_Octopuscommunity_AuthServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "com.octopuscommunity.AuthService",
    methods: [
      Com_Octopuscommunity_AuthServiceServerMetadata.Methods.logAs,
    ]
  )

  public enum Methods {
    public static let logAs = GRPCMethodDescriptor(
      name: "LogAs",
      path: "/com.octopuscommunity.AuthService/LogAs",
      type: GRPCCallType.unary
    )
  }
}
