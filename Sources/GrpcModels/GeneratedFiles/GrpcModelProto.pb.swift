// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com/octopuscommunity/GrpcModelProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Com_Octopuscommunity_StatusValue: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case published // = 1
  case moderated // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .published
    case 2: self = .moderated
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .published: return 1
    case .moderated: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Com_Octopuscommunity_StatusValue] = [
    .unknown,
    .published,
    .moderated,
  ]

}

public enum Com_Octopuscommunity_StatusReasonCode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecifiedReason // = 0

  ///Hate speech or discriminatory content
  case hte // = 1

  ///Harassment, intimidation, or threats toward a user
  case hrs // = 2

  ///Violent content or content inciting violence
  case vlc // = 3

  ///Pornography or sexually explicit content
  case sxc // = 4

  ///Misinformation or fake news new
  case fkc // = 5

  ///Spam, promotional, or unsolicited advertising content
  case spm // = 6

  ///Sharing personal or private information
  case pii // = 7

  ///Illegal content
  case ill // = 8

  ///Terrorism
  case ter // = 9

  ///Child exploitation
  case cex // = 10

  ///Impersonation or identity theft
  case imp // = 11

  ///Promotes suicide, self injury or eating disorders
  case ssh // = 12

  ///Other
  case oth // = 9999
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedReason
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedReason
    case 1: self = .hte
    case 2: self = .hrs
    case 3: self = .vlc
    case 4: self = .sxc
    case 5: self = .fkc
    case 6: self = .spm
    case 7: self = .pii
    case 8: self = .ill
    case 9: self = .ter
    case 10: self = .cex
    case 11: self = .imp
    case 12: self = .ssh
    case 9999: self = .oth
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedReason: return 0
    case .hte: return 1
    case .hrs: return 2
    case .vlc: return 3
    case .sxc: return 4
    case .fkc: return 5
    case .spm: return 6
    case .pii: return 7
    case .ill: return 8
    case .ter: return 9
    case .cex: return 10
    case .imp: return 11
    case .ssh: return 12
    case .oth: return 9999
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Com_Octopuscommunity_StatusReasonCode] = [
    .unspecifiedReason,
    .hte,
    .hrs,
    .vlc,
    .sxc,
    .fkc,
    .spm,
    .pii,
    .ill,
    .ter,
    .cex,
    .imp,
    .ssh,
    .oth,
  ]

}

///normalized OctoObject
public struct Com_Octopuscommunity_OctoObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var parentID: String = String()

  public var createdAt: UInt64 = 0

  public var updatedAt: UInt64 = 0

  public var pressedEnterAt: UInt64 = 0

  ///Empty when user is deleted or banned
  public var createdBy: Com_Octopuscommunity_MinimalProfile {
    get {return _createdBy ?? Com_Octopuscommunity_MinimalProfile()}
    set {_createdBy = newValue}
  }
  /// Returns true if `createdBy` has been explicitly set.
  public var hasCreatedBy: Bool {return self._createdBy != nil}
  /// Clears the value of `createdBy`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedBy() {self._createdBy = nil}

  ///nanoId
  public var id: String = String()

  public var content: Com_Octopuscommunity_Content {
    get {return _content ?? Com_Octopuscommunity_Content()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var status: Com_Octopuscommunity_OctoObject.Status {
    get {return _status ?? Com_Octopuscommunity_OctoObject.Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  ///To fetch post comments
  ///Or comment replies
  public var descChildrenFeedID: String {
    get {return _descChildrenFeedID ?? String()}
    set {_descChildrenFeedID = newValue}
  }
  /// Returns true if `descChildrenFeedID` has been explicitly set.
  public var hasDescChildrenFeedID: Bool {return self._descChildrenFeedID != nil}
  /// Clears the value of `descChildrenFeedID`. Subsequent reads from it will return its default value.
  public mutating func clearDescChildrenFeedID() {self._descChildrenFeedID = nil}

  public var ascChildrenFeedID: String {
    get {return _ascChildrenFeedID ?? String()}
    set {_ascChildrenFeedID = newValue}
  }
  /// Returns true if `ascChildrenFeedID` has been explicitly set.
  public var hasAscChildrenFeedID: Bool {return self._ascChildrenFeedID != nil}
  /// Clears the value of `ascChildrenFeedID`. Subsequent reads from it will return its default value.
  public mutating func clearAscChildrenFeedID() {self._ascChildrenFeedID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Status: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Com_Octopuscommunity_StatusValue = .unknown

    public var reasons: [Com_Octopuscommunity_StatusReason] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _createdBy: Com_Octopuscommunity_MinimalProfile? = nil
  fileprivate var _content: Com_Octopuscommunity_Content? = nil
  fileprivate var _status: Com_Octopuscommunity_OctoObject.Status? = nil
  fileprivate var _descChildrenFeedID: String? = nil
  fileprivate var _ascChildrenFeedID: String? = nil
}

public struct Com_Octopuscommunity_RequesterCtx: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///If the requester liked the object
  public var likeID: String {
    get {return _likeID ?? String()}
    set {_likeID = newValue}
  }
  /// Returns true if `likeID` has been explicitly set.
  public var hasLikeID: Bool {return self._likeID != nil}
  /// Clears the value of `likeID`. Subsequent reads from it will return its default value.
  public mutating func clearLikeID() {self._likeID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _likeID: String? = nil
}

public struct Com_Octopuscommunity_StatusReason: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Com_Octopuscommunity_StatusReasonCode = .unspecifiedReason

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_Aggregate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var childrenCount: UInt32 = 0

  public var childrenLatestAddedAt: UInt64 = 0

  public var likeCount: UInt32 = 0

  public var viewCount: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_MinimalProfile: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var profileID: String = String()

  public var nickname: String = String()

  public var avatarURL: String {
    get {return _avatarURL ?? String()}
    set {_avatarURL = newValue}
  }
  /// Returns true if `avatarURL` has been explicitly set.
  public var hasAvatarURL: Bool {return self._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
  public mutating func clearAvatarURL() {self._avatarURL = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _avatarURL: String? = nil
}

public struct Com_Octopuscommunity_Content: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Only one of the following should be set
  ///I don't use oneof because it's just syntactic sugar, and don't throw error if multiple fields are set (it keep the last one)
  public var topic: Com_Octopuscommunity_Topic {
    get {return _storage._topic ?? Com_Octopuscommunity_Topic()}
    set {_uniqueStorage()._topic = newValue}
  }
  /// Returns true if `topic` has been explicitly set.
  public var hasTopic: Bool {return _storage._topic != nil}
  /// Clears the value of `topic`. Subsequent reads from it will return its default value.
  public mutating func clearTopic() {_uniqueStorage()._topic = nil}

  public var post: Com_Octopuscommunity_Post {
    get {return _storage._post ?? Com_Octopuscommunity_Post()}
    set {_uniqueStorage()._post = newValue}
  }
  /// Returns true if `post` has been explicitly set.
  public var hasPost: Bool {return _storage._post != nil}
  /// Clears the value of `post`. Subsequent reads from it will return its default value.
  public mutating func clearPost() {_uniqueStorage()._post = nil}

  public var comment: Com_Octopuscommunity_Comment {
    get {return _storage._comment ?? Com_Octopuscommunity_Comment()}
    set {_uniqueStorage()._comment = newValue}
  }
  /// Returns true if `comment` has been explicitly set.
  public var hasComment: Bool {return _storage._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
  public mutating func clearComment() {_uniqueStorage()._comment = nil}

  public var reply: Com_Octopuscommunity_Reply {
    get {return _storage._reply ?? Com_Octopuscommunity_Reply()}
    set {_uniqueStorage()._reply = newValue}
  }
  /// Returns true if `reply` has been explicitly set.
  public var hasReply: Bool {return _storage._reply != nil}
  /// Clears the value of `reply`. Subsequent reads from it will return its default value.
  public mutating func clearReply() {_uniqueStorage()._reply = nil}

  public var channel: Com_Octopuscommunity_Channel {
    get {return _storage._channel ?? Com_Octopuscommunity_Channel()}
    set {_uniqueStorage()._channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  public var hasChannel: Bool {return _storage._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  public mutating func clearChannel() {_uniqueStorage()._channel = nil}

  public var message: Com_Octopuscommunity_Message {
    get {return _storage._message ?? Com_Octopuscommunity_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var like: Com_Octopuscommunity_Like {
    get {return _storage._like ?? Com_Octopuscommunity_Like()}
    set {_uniqueStorage()._like = newValue}
  }
  /// Returns true if `like` has been explicitly set.
  public var hasLike: Bool {return _storage._like != nil}
  /// Clears the value of `like`. Subsequent reads from it will return its default value.
  public mutating func clearLike() {_uniqueStorage()._like = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Octopuscommunity_Like: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_Channel: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  ///string imgUrl = 3;
  ///Children should be Message
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var medias: [Com_Octopuscommunity_Media] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_Topic: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  ///string imgUrl = 4;
  ///Children should be Post
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Octopuscommunity_StrictMedia: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Carousel
  public var images: [Com_Octopuscommunity_Media] = []

  ///Video
  public var video: Com_Octopuscommunity_Media {
    get {return _video ?? Com_Octopuscommunity_Media()}
    set {_video = newValue}
  }
  /// Returns true if `video` has been explicitly set.
  public var hasVideo: Bool {return self._video != nil}
  /// Clears the value of `video`. Subsequent reads from it will return its default value.
  public mutating func clearVideo() {self._video = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _video: Com_Octopuscommunity_Media? = nil
}

public struct Com_Octopuscommunity_Media: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var file: Com_Octopuscommunity_Media.OneOf_File? = nil

  public var url: String {
    get {
      if case .url(let v)? = file {return v}
      return String()
    }
    set {file = .url(newValue)}
  }

  public var bytes: Data {
    get {
      if case .bytes(let v)? = file {return v}
      return Data()
    }
    set {file = .bytes(newValue)}
  }

  public var name: String = String()

  public var contentType: String = String()

  public var width: Int32 {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  public var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  public mutating func clearWidth() {self._width = nil}

  public var height: Int32 {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  public mutating func clearHeight() {self._height = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_File: Equatable, @unchecked Sendable {
    case url(String)
    case bytes(Data)

  }

  public init() {}

  fileprivate var _width: Int32? = nil
  fileprivate var _height: Int32? = nil
}

public struct Com_Octopuscommunity_Post: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var headline: String = String()

  public var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() {self._text = nil}

  ///Children should be Comment
  public var media: Com_Octopuscommunity_StrictMedia {
    get {return _media ?? Com_Octopuscommunity_StrictMedia()}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  public var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  public mutating func clearMedia() {self._media = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _text: String? = nil
  fileprivate var _media: Com_Octopuscommunity_StrictMedia? = nil
}

public struct Com_Octopuscommunity_Comment: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  ///Children should be Reply
  public var media: Com_Octopuscommunity_StrictMedia {
    get {return _media ?? Com_Octopuscommunity_StrictMedia()}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  public var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  public mutating func clearMedia() {self._media = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _media: Com_Octopuscommunity_StrictMedia? = nil
}

public struct Com_Octopuscommunity_Reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var media: Com_Octopuscommunity_StrictMedia {
    get {return _media ?? Com_Octopuscommunity_StrictMedia()}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  public var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  public mutating func clearMedia() {self._media = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _media: Com_Octopuscommunity_StrictMedia? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.octopuscommunity"

extension Com_Octopuscommunity_StatusValue: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "PUBLISHED"),
    2: .same(proto: "MODERATED"),
  ]
}

extension Com_Octopuscommunity_StatusReasonCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_REASON"),
    1: .same(proto: "HTE"),
    2: .same(proto: "HRS"),
    3: .same(proto: "VLC"),
    4: .same(proto: "SXC"),
    5: .same(proto: "FKC"),
    6: .same(proto: "SPM"),
    7: .same(proto: "PII"),
    8: .same(proto: "ILL"),
    9: .same(proto: "TER"),
    10: .same(proto: "CEX"),
    11: .same(proto: "IMP"),
    12: .same(proto: "SSH"),
    9999: .same(proto: "OTH"),
  ]
}

extension Com_Octopuscommunity_OctoObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OctoObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parentId"),
    2: .same(proto: "createdAt"),
    7: .same(proto: "updatedAt"),
    6: .same(proto: "pressedEnterAt"),
    3: .same(proto: "createdBy"),
    4: .same(proto: "id"),
    5: .same(proto: "content"),
    20: .same(proto: "status"),
    10: .same(proto: "descChildrenFeedId"),
    11: .same(proto: "ascChildrenFeedId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parentID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdBy) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.pressedEnterAt) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.updatedAt) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._descChildrenFeedID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._ascChildrenFeedID) }()
      case 20: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 1)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 2)
    }
    try { if let v = self._createdBy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    try { if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.pressedEnterAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.pressedEnterAt, fieldNumber: 6)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.updatedAt, fieldNumber: 7)
    }
    try { if let v = self._descChildrenFeedID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._ascChildrenFeedID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_OctoObject, rhs: Com_Octopuscommunity_OctoObject) -> Bool {
    if lhs.parentID != rhs.parentID {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.pressedEnterAt != rhs.pressedEnterAt {return false}
    if lhs._createdBy != rhs._createdBy {return false}
    if lhs.id != rhs.id {return false}
    if lhs._content != rhs._content {return false}
    if lhs._status != rhs._status {return false}
    if lhs._descChildrenFeedID != rhs._descChildrenFeedID {return false}
    if lhs._ascChildrenFeedID != rhs._ascChildrenFeedID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_OctoObject.Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Com_Octopuscommunity_OctoObject.protoMessageName + ".Status"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "reasons"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.reasons) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .unknown {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    if !self.reasons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reasons, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_OctoObject.Status, rhs: Com_Octopuscommunity_OctoObject.Status) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.reasons != rhs.reasons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_RequesterCtx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequesterCtx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "likeId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._likeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._likeID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_RequesterCtx, rhs: Com_Octopuscommunity_RequesterCtx) -> Bool {
    if lhs._likeID != rhs._likeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_StatusReason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StatusReason"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .unspecifiedReason {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_StatusReason, rhs: Com_Octopuscommunity_StatusReason) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Aggregate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Aggregate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "childrenCount"),
    2: .same(proto: "childrenLatestAddedAt"),
    3: .same(proto: "likeCount"),
    4: .same(proto: "viewCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.childrenCount) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.childrenLatestAddedAt) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.likeCount) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.viewCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.childrenCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.childrenCount, fieldNumber: 1)
    }
    if self.childrenLatestAddedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.childrenLatestAddedAt, fieldNumber: 2)
    }
    if self.likeCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.likeCount, fieldNumber: 3)
    }
    if self.viewCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.viewCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Aggregate, rhs: Com_Octopuscommunity_Aggregate) -> Bool {
    if lhs.childrenCount != rhs.childrenCount {return false}
    if lhs.childrenLatestAddedAt != rhs.childrenLatestAddedAt {return false}
    if lhs.likeCount != rhs.likeCount {return false}
    if lhs.viewCount != rhs.viewCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_MinimalProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MinimalProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profileId"),
    2: .same(proto: "nickname"),
    3: .same(proto: "avatarUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profileID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._avatarURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.profileID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileID, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    try { if let v = self._avatarURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_MinimalProfile, rhs: Com_Octopuscommunity_MinimalProfile) -> Bool {
    if lhs.profileID != rhs.profileID {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs._avatarURL != rhs._avatarURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    101: .same(proto: "topic"),
    102: .same(proto: "post"),
    103: .same(proto: "comment"),
    104: .same(proto: "reply"),
    201: .same(proto: "channel"),
    202: .same(proto: "message"),
    300: .same(proto: "like"),
  ]

  fileprivate class _StorageClass {
    var _topic: Com_Octopuscommunity_Topic? = nil
    var _post: Com_Octopuscommunity_Post? = nil
    var _comment: Com_Octopuscommunity_Comment? = nil
    var _reply: Com_Octopuscommunity_Reply? = nil
    var _channel: Com_Octopuscommunity_Channel? = nil
    var _message: Com_Octopuscommunity_Message? = nil
    var _like: Com_Octopuscommunity_Like? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _topic = source._topic
      _post = source._post
      _comment = source._comment
      _reply = source._reply
      _channel = source._channel
      _message = source._message
      _like = source._like
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 101: try { try decoder.decodeSingularMessageField(value: &_storage._topic) }()
        case 102: try { try decoder.decodeSingularMessageField(value: &_storage._post) }()
        case 103: try { try decoder.decodeSingularMessageField(value: &_storage._comment) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._reply) }()
        case 201: try { try decoder.decodeSingularMessageField(value: &_storage._channel) }()
        case 202: try { try decoder.decodeSingularMessageField(value: &_storage._message) }()
        case 300: try { try decoder.decodeSingularMessageField(value: &_storage._like) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._topic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._post {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._comment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._reply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._channel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      } }()
      try { if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
      } }()
      try { if let v = _storage._like {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Content, rhs: Com_Octopuscommunity_Content) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._topic != rhs_storage._topic {return false}
        if _storage._post != rhs_storage._post {return false}
        if _storage._comment != rhs_storage._comment {return false}
        if _storage._reply != rhs_storage._reply {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._like != rhs_storage._like {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Like: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Like"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Like, rhs: Com_Octopuscommunity_Like) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Channel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Channel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Channel, rhs: Com_Octopuscommunity_Channel) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "medias"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.medias) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.medias.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.medias, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Message, rhs: Com_Octopuscommunity_Message) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.medias != rhs.medias {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Topic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Topic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Topic, rhs: Com_Octopuscommunity_Topic) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_StrictMedia: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StrictMedia"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "images"),
    2: .same(proto: "video"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.images) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._video) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.images.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.images, fieldNumber: 1)
    }
    try { if let v = self._video {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_StrictMedia, rhs: Com_Octopuscommunity_StrictMedia) -> Bool {
    if lhs.images != rhs.images {return false}
    if lhs._video != rhs._video {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Media: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Media"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    4: .same(proto: "bytes"),
    2: .same(proto: "name"),
    3: .same(proto: "contentType"),
    5: .same(proto: "width"),
    6: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.file != nil {try decoder.handleConflictingOneOf()}
          self.file = .url(v)
        }
      }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contentType) }()
      case 4: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.file != nil {try decoder.handleConflictingOneOf()}
          self.file = .bytes(v)
        }
      }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._width) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .url(let v)? = self.file {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 3)
    }
    try { if case .bytes(let v)? = self.file {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._width {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._height {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Media, rhs: Com_Octopuscommunity_Media) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.name != rhs.name {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Post: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Post"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "headline"),
    2: .same(proto: "text"),
    3: .same(proto: "media"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.headline) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._media) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.headline.isEmpty {
      try visitor.visitSingularStringField(value: self.headline, fieldNumber: 1)
    }
    try { if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Post, rhs: Com_Octopuscommunity_Post) -> Bool {
    if lhs.headline != rhs.headline {return false}
    if lhs._text != rhs._text {return false}
    if lhs._media != rhs._media {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "media"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._media) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try { if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Comment, rhs: Com_Octopuscommunity_Comment) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs._media != rhs._media {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Octopuscommunity_Reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "media"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._media) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try { if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Octopuscommunity_Reply, rhs: Com_Octopuscommunity_Reply) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs._media != rhs._media {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
